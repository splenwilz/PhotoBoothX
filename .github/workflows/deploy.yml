name: "Deploy Photobooth"

on:
  push:
    # branches:
    #   - production
    tags:
      - "photobooth-x/v*"

permissions:
  contents: write

env:
  PROJECT_PATH: PhotoBooth/PhotoBooth.csproj

jobs:
  deploy:
    runs-on: windows-latest
    steps:  
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: Restore
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Publish (Release - No Debug Files)
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o publish --self-contained false -p:DebugType=None -p:DebugSymbols=false

      - name: Remove Debug Files
        run: |
          Remove-Item "publish\*.pdb" -Force -ErrorAction SilentlyContinue
          Remove-Item "publish\*.xml" -Force -ErrorAction SilentlyContinue

      - name: Setup Inno Setup (Fast)
        run: |
          Write-Host "Installing Inno Setup via Chocolatey..."
          try {
            # Use Chocolatey for faster, more reliable installation
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
            choco install innosetup -y --timeout=300
            echo "INNO_AVAILABLE=true" >> $env:GITHUB_ENV
          } catch {
            Write-Host "Chocolatey installation failed, trying direct download..."
            try {
              $ProgressPreference = 'SilentlyContinue'
              Invoke-WebRequest -Uri "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe" -OutFile "innosetup.exe" -TimeoutSec 120
              Start-Process "innosetup.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/CLOSEAPPLICATIONS" -Wait -TimeoutSec 300
              echo "INNO_AVAILABLE=true" >> $env:GITHUB_ENV
            } catch {
              Write-Host "Inno Setup installation failed. Will create ZIP only."
              echo "INNO_AVAILABLE=false" >> $env:GITHUB_ENV
            }
          }
        timeout-minutes: 10

      - name: Create deployment structure
        run: |
          New-Item -ItemType Directory -Path "deployment/PhotoBoothX" -Force
          New-Item -ItemType Directory -Path "deployment/PhotoBoothX/data" -Force
          New-Item -ItemType Directory -Path "deployment/PhotoBoothX/logs" -Force
          New-Item -ItemType Directory -Path "deployment/PhotoBoothX/config" -Force
          
          # Copy application files
          Copy-Item "publish/*" "deployment/PhotoBoothX/" -Recurse -Force
          
          # Move user data to separate folders
          if (Test-Path "deployment/PhotoBoothX/Database_Schema.sql") {
            Move-Item "deployment/PhotoBoothX/Database_Schema.sql" "deployment/PhotoBoothX/data/" -Force
          }
          
          # Create version file
          "${{ github.ref_name }}" | Out-File "deployment/PhotoBoothX/VERSION.txt"
          
          # Copy license files
          Copy-Item "LICENSE.txt" "deployment/PhotoBoothX/" -Force
          Copy-Item "EULA.txt" "deployment/PhotoBoothX/" -Force
          
          # Create professional README
          @"
          PhotoBooth Professional ${{ github.ref_name }}
          
          COMMERCIAL PHOTOBOOTH SOFTWARE
          
          INSTALLATION:
          1. Install .NET 8.0 Desktop Runtime (if not already installed)
          2. Extract this folder to desired location (e.g., C:\PhotoBooth)
          3. Run PhotoBooth.exe as Administrator
          4. Follow license activation prompts
          
          DIRECTORY STRUCTURE:
          - PhotoBooth.exe + DLLs: Main application (do not separate)
          - Templates/: Customizable print templates
          - data/: Database schema and static data
          - logs/: Application logs (created at runtime)
          - config/: Runtime configuration (created at runtime)
          
          SYSTEM REQUIREMENTS:
          - Windows 10/11 (64-bit)
          - .NET 8.0 Desktop Runtime
          - 500MB free disk space
          - Administrator privileges
          
          SUPPORT:
          - Email: support@yourcompany.com
          - Documentation: https://yourcompany.com/docs
          - License: Valid commercial license required
          
          COPYRIGHT:
          ¬© 2025 [Your Company Name]. All rights reserved.
          This software is protected by copyright law and international treaties.
          
          NOTE: DLLs and config files must remain with PhotoBooth.exe
          "@ | Out-File "deployment/PhotoBoothX/README.txt"

      - name: Build Installer (if available)
        if: env.INNO_AVAILABLE == 'true'
        run: |
          Write-Host "Building professional installer..."
          try {
            # Create basic installer script since our complex one might have issues
            $issContent = @"
          [Setup]
          AppName=PhotoBooth Professional
          AppVersion=${{ github.ref_name }}
          AppPublisher=Your Company Name
          DefaultDirName={autopf}\PhotoBooth
          DefaultGroupName=PhotoBooth Professional
          OutputDir=installer-output
          OutputBaseFilename=PhotoBooth-Professional-Setup
          Compression=lzma
          SolidCompression=yes
          PrivilegesRequired=admin
          
          [Files]
          Source: "PhotoBoothX\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
          
          [Icons]
          Name: "{group}\PhotoBooth Professional"; Filename: "{app}\PhotoBooth.exe"
          Name: "{autodesktop}\PhotoBooth Professional"; Filename: "{app}\PhotoBooth.exe"
          
          [Run]
          Filename: "{app}\PhotoBooth.exe"; Description: "Launch PhotoBooth Professional"; Flags: nowait postinstall skipifsilent
          "@
            
            $issContent | Out-File "deployment/simple-setup.iss" -Encoding UTF8
            
            # Find Inno Setup compiler
            $isccPath = @(
              "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
              "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe",
              "${env:ChocolateyInstall}\bin\ISCC.exe"
            ) | Where-Object { Test-Path $_ } | Select-Object -First 1
            
            if ($isccPath) {
              Push-Location "deployment"
              & $isccPath "simple-setup.iss"
              Pop-Location
              echo "INSTALLER_CREATED=true" >> $env:GITHUB_ENV
            } else {
              Write-Host "ISCC.exe not found"
              echo "INSTALLER_CREATED=false" >> $env:GITHUB_ENV
            }
          } catch {
            Write-Host "Installer build failed: $_"
            echo "INSTALLER_CREATED=false" >> $env:GITHUB_ENV
          }
        timeout-minutes: 5

      - name: Create ZIP Package
        run: |
          $tagName = "${{ github.ref_name }}" -replace "/", "-"
          Compress-Archive -Path "deployment\PhotoBoothX\*" -DestinationPath "PhotoBoothX-$tagName-win-x64.zip"

      - name: Prepare Release Assets
        run: |
          $tagName = "${{ github.ref_name }}" -replace "/", "-"
          
          # Check if installer was created
          if ($env:INSTALLER_CREATED -eq "true") {
            $installerPath = "deployment/installer-output/PhotoBooth-Professional-Setup.exe"
            if (Test-Path $installerPath) {
              Copy-Item $installerPath "PhotoBooth-Professional-Setup-$tagName.exe"
              Write-Host "‚úÖ Professional installer created"
            }
          } else {
            Write-Host "‚ö†Ô∏è Installer not available - ZIP package only"
          }

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: PhotoBooth Professional ${{ github.ref_name }}
          files: |
            PhotoBooth-Professional-Setup-*.exe
            PhotoBoothX-*-win-x64.zip
          body: |
            ## PhotoBooth Professional ${{ github.ref_name }}
            
            **üè™ Commercial Grade Photobooth Software**
            
            ### üì¶ Download Options:
            
            ${{ env.INSTALLER_CREATED == 'true' && '**ü•á RECOMMENDED: Professional Installer**' || '**üìÅ Manual Installation**' }}
            ${{ env.INSTALLER_CREATED == 'true' && '- `PhotoBooth-Professional-Setup-[version].exe` - Complete installer' || '- Professional installer temporarily unavailable' }}
            
            **üìÅ Manual Installation Package**
            - `PhotoBoothX-[version]-win-x64.zip` - Full application package
            
            ### üéØ Professional Features:
            - ‚úÖ Commercial licensing system
            - ‚úÖ Professional deployment package  
            - ‚úÖ Clean, organized file structure
            - ‚úÖ Version tracking and support
            - ‚úÖ Production-optimized build
            - ‚úÖ Comprehensive documentation
            
            ### üìã System Requirements:
            - Windows 10/11 (64-bit)
            - .NET 8.0 Desktop Runtime
            - 500MB free disk space
            - Administrator privileges
            
            ### üöÄ Quick Start:
            1. Download ZIP package above
            2. Extract to desired location (e.g., C:\PhotoBooth)
            3. Install .NET 8.0 Desktop Runtime if needed
            4. Run PhotoBooth.exe as Administrator
            
            ### üìû Support:
            - üìß Technical Support: support@yourcompany.com
            - üí∞ Sales & Licensing: sales@yourcompany.com
            
            ---
            **‚ö†Ô∏è Commercial License Required - Annual Subscription**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 