name: "Build and Deploy PhotoBoothX"

on:
  push:
    branches:
      - production
      - main  # Also trigger on main for testing
  pull_request:
    branches:
      - production
  release:
    types: [published]

# Add permissions for GitHub token
permissions:
  contents: write
  actions: read
  checks: write

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'PhotoBooth/PhotoBooth.csproj'
  INSTALLER_PATH: 'installer/PhotoBoothX.iss'
  PUBLISH_PATH: 'PhotoBooth/bin/Release/net8.0-windows/win-x64/publish'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for version calculation
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build application
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
      
    - name: Run tests
      run: |
        if (Test-Path "Photobooth.Tests/Photobooth.Tests.csproj") {
          dotnet test Photobooth.Tests/Photobooth.Tests.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory coverage
        } else {
          Write-Host "No tests found, skipping test execution"
        }
      shell: powershell
      
    - name: Publish application
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --output ${{ env.PUBLISH_PATH }} --self-contained true --runtime win-x64 /p:PublishSingleFile=true /p:PublishReadyToRun=true
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: published-app
        path: ${{ env.PUBLISH_PATH }}
        retention-days: 30

  create-installer:
    name: Create Installer
    needs: build-and-test
    runs-on: windows-latest
    if: github.ref == 'refs/heads/production' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: published-app
        path: ${{ env.PUBLISH_PATH }}
        
    - name: Setup Inno Setup
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: install innosetup -y
        
    - name: Verify Inno Setup Installation
      run: |
        # Check if Inno Setup was installed successfully
        $isccPaths = @(
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
          "C:\Program Files\Inno Setup 6\ISCC.exe",
          "C:\tools\innosetup\ISCC.exe"
        )
        
        $isccPath = $null
        foreach ($path in $isccPaths) {
          if (Test-Path $path) {
            $isccPath = $path
            Write-Host "✅ Found ISCC.exe at: $path"
            break
          }
        }
        
        if (-not $isccPath) {
          Write-Host "❌ ISCC.exe not found in expected locations"
          Write-Host "Searching for ISCC.exe..."
          Get-ChildItem "C:\" -Recurse -Name "ISCC.exe" -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "Found: $_"
          }
          throw "Inno Setup not found"
        }
      shell: powershell
        
    - name: Get version from project
      id: get_version
      run: |
        $xml = [xml](Get-Content ${{ env.PROJECT_PATH }})
        $version = $xml.Project.PropertyGroup.Version
        if (-not $version) {
          $version = "1.0.0"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
      shell: powershell
      
    - name: Update installer version
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $installerContent = Get-Content ${{ env.INSTALLER_PATH }} -Raw
        $installerContent = $installerContent -replace '#define MyAppVersion ".*"', "#define MyAppVersion `"$version`""
        Set-Content ${{ env.INSTALLER_PATH }} -Value $installerContent
      shell: powershell
      
    - name: Create dist directory
      run: New-Item -ItemType Directory -Force -Path "dist"
      shell: powershell
      
    - name: Build installer
      run: |
        # Try multiple possible paths for Inno Setup
        $isccPaths = @(
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
          "C:\Program Files\Inno Setup 6\ISCC.exe",
          "C:\tools\Inno Setup 6\ISCC.exe"
        )
        
        $isccPath = $null
        foreach ($path in $isccPaths) {
          if (Test-Path $path) {
            $isccPath = $path
            Write-Host "Found ISCC.exe at: $path"
            break
          }
        }
        
        if (-not $isccPath) {
          Write-Host "Searching for ISCC.exe in all Program Files directories..."
          Get-ChildItem -Path "C:\Program Files*" -Recurse -Name "ISCC.exe" -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "Found: $_"
          }
          throw "ISCC.exe not found"
        }
        
        # Verify installer script exists
        $installerScript = "${{ env.INSTALLER_PATH }}"
        if (-not (Test-Path $installerScript)) {
          throw "Installer script not found: $installerScript"
        }
        
        Write-Host "Building installer with: $isccPath"
        Write-Host "Installer script: $installerScript"
        
        # Run the compiler and capture output
        try {
          $output = & $isccPath $installerScript 2>&1
          Write-Host "Compiler output:"
          $output | ForEach-Object { Write-Host "  $_" }
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Exit code: $LASTEXITCODE"
            throw "Installer build failed with exit code $LASTEXITCODE"
          }
          
          Write-Host "✅ Installer built successfully"
        } catch {
          Write-Host "❌ Error during compilation:"
          Write-Host $_.Exception.Message
          throw
        }
      shell: powershell
      
    - name: Upload installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: installer
        path: dist/*.exe
        retention-days: 90
        
    - name: List installer files
      run: Get-ChildItem -Path "dist" -Recurse
      shell: powershell

  create-release:
    name: Create GitHub Release
    needs: [build-and-test, create-installer]
    runs-on: windows-latest
    if: github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from project
      id: get_version
      run: |
        $xml = [xml](Get-Content ${{ env.PROJECT_PATH }})
        $version = $xml.Project.PropertyGroup.Version
        if (-not $version) {
          $version = "1.0.0"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "RELEASE_TAG=v$version" >> $env:GITHUB_OUTPUT
      shell: powershell
      
    - name: Download installer artifact
      uses: actions/download-artifact@v4
      with:
        name: installer
        path: installer-files
        
    - name: Generate release notes
      id: release_notes
      run: |
        $releaseNotes = @"
        ## PhotoBoothX Release ${{ steps.get_version.outputs.VERSION }}
        
        ### What's New
        - Latest build from production branch
        - Updated application with recent changes
        - Professional installer with auto-launch support
        
        ### Installation
        1. Download PhotoBoothX-Setup-${{ steps.get_version.outputs.VERSION }}.exe
        2. Run as Administrator
        3. Follow the installation wizard
        4. The application will auto-launch on Windows startup (recommended for kiosk mode)
        
        ### System Requirements
        - Windows 10/11 (64-bit)
        - .NET 8.0 Runtime (included in installer)
        - Administrator privileges for installation
        - USB ports for camera and hardware
        
        ### Notes
        - Database stored in AppData (survives reinstalls)
        - Templates are user-updatable in Program Files
        - Check hardware connections after installation
        
        ---
        **Build:** ${{ github.sha }}  
        **Date:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        "@
        
        $releaseNotes | Out-File -FilePath release_notes.txt -Encoding utf8
        echo "RELEASE_BODY<<EOF" >> $env:GITHUB_OUTPUT
        Get-Content release_notes.txt | ForEach-Object { echo $_ >> $env:GITHUB_OUTPUT }
        echo "EOF" >> $env:GITHUB_OUTPUT
      shell: powershell
      
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.RELEASE_TAG }}
        name: PhotoBoothX ${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_BODY }}
        draft: false
        prerelease: false
        files: |
          installer-files/*.exe
        make_latest: true
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    name: Notify Deployment Success
    needs: [create-release]
    runs-on: windows-latest
    if: success() && github.ref == 'refs/heads/production'
    
    steps:
    - name: Success notification
      run: |
        Write-Host "🎉 PhotoBoothX deployment successful!"
        Write-Host "📦 Installer available in GitHub Releases"
        Write-Host "🔗 Your client can download from: ${{ github.server_url }}/${{ github.repository }}/releases/latest"
      shell: powershell