name: "Deploy Photobooth"

on:
  push:
    # branches:
    #   - production
    tags:
      - "photobooth-x/v*"

permissions:
  contents: write

env:
  PROJECT_PATH: PhotoBooth/PhotoBooth.csproj

jobs:
  deploy:
    runs-on: windows-latest
    steps:  
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: Download Inno Setup Compiler
        run: |
          Write-Host "Downloading precompiled Inno Setup..."
          try {
            # Download latest Inno Setup from official site
            $ProgressPreference = 'SilentlyContinue'
            Invoke-WebRequest -Uri "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe" -OutFile "innosetup.exe" -TimeoutSec 60
            
            # Silent install
            Start-Process "innosetup.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/DIR=C:\InnoSetup" -Wait -TimeoutSec 180
            
            # Verify installation
            if (Test-Path "C:\InnoSetup\ISCC.exe") {
              Write-Host "‚úÖ Inno Setup installed successfully"
              echo "INNO_AVAILABLE=true" >> $env:GITHUB_ENV
              echo "ISCC_PATH=C:\InnoSetup\ISCC.exe" >> $env:GITHUB_ENV
            } else {
              Write-Host "‚ùå Inno Setup installation failed"
              echo "INNO_AVAILABLE=false" >> $env:GITHUB_ENV
            }
          } catch {
            Write-Host "‚ùå Failed to download/install Inno Setup: $_"
            echo "INNO_AVAILABLE=false" >> $env:GITHUB_ENV
          }
        timeout-minutes: 5

      - name: Restore
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Publish (Production Build)
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o publish --self-contained false -p:DebugType=None -p:DebugSymbols=false

      - name: Clean Production Build
        run: |
          Write-Host "Cleaning production build..."
          Remove-Item "publish\*.pdb" -Force -ErrorAction SilentlyContinue
          Remove-Item "publish\*.xml" -Force -ErrorAction SilentlyContinue
          Write-Host "‚úÖ Debug files removed"

      - name: Create Professional Deployment Package
        run: |
          Write-Host "Creating professional deployment structure..."
          
          New-Item -ItemType Directory -Path "deployment/PhotoBoothX" -Force
          New-Item -ItemType Directory -Path "deployment/PhotoBoothX/data" -Force
          New-Item -ItemType Directory -Path "deployment/PhotoBoothX/logs" -Force
          New-Item -ItemType Directory -Path "deployment/PhotoBoothX/config" -Force
          
          # Copy application files
          Copy-Item "publish/*" "deployment/PhotoBoothX/" -Recurse -Force
          
          # Move user data to separate folders
          if (Test-Path "deployment/PhotoBoothX/Database_Schema.sql") {
            Move-Item "deployment/PhotoBoothX/Database_Schema.sql" "deployment/PhotoBoothX/data/" -Force
          }
          
          # Create version file
          "${{ github.ref_name }}" | Out-File "deployment/PhotoBoothX/VERSION.txt"
          
          # Copy license files
          Copy-Item "LICENSE.txt" "deployment/PhotoBoothX/" -Force
          Copy-Item "EULA.txt" "deployment/PhotoBoothX/" -Force
          
          # Create professional installation guide
          @"
          PhotoBooth Professional ${{ github.ref_name }}
          ==========================================
          
          üè™ COMMERCIAL PHOTOBOOTH SOFTWARE
          
          üìã SYSTEM REQUIREMENTS:
          - Windows 10/11 (64-bit)
          - .NET 8.0 Desktop Runtime (Required - see link below)
          - 500MB free disk space
          - Administrator privileges for initial setup
          
          üöÄ INSTALLATION INSTRUCTIONS:
          
          1. INSTALL .NET RUNTIME FIRST:
             Download and install .NET 8.0 Desktop Runtime:
             https://dotnet.microsoft.com/download/dotnet/8.0
             (Choose "Desktop Runtime" for Windows x64)
          
          2. EXTRACT THIS FOLDER:
             Extract the entire PhotoBoothX folder to your desired location:
             Recommended: C:\PhotoBooth\
          
          3. RUN THE APPLICATION:
             - Navigate to the PhotoBoothX folder
             - Right-click PhotoBooth.exe
             - Select "Run as administrator"
             - Follow license activation prompts
          
          üìÅ FOLDER STRUCTURE:
          PhotoBoothX/
          ‚îú‚îÄ‚îÄ PhotoBooth.exe          # Main application
          ‚îú‚îÄ‚îÄ *.dll                   # Required .NET dependencies
          ‚îú‚îÄ‚îÄ Templates/              # Print templates (customizable)
          ‚îú‚îÄ‚îÄ data/                   # Database schema
          ‚îú‚îÄ‚îÄ logs/                   # Application logs (auto-created)
          ‚îú‚îÄ‚îÄ config/                 # Settings (auto-created)
          ‚îú‚îÄ‚îÄ LICENSE.txt             # Software license
          ‚îú‚îÄ‚îÄ EULA.txt                # End user agreement
          ‚îî‚îÄ‚îÄ README.txt              # This file
          
          ‚ö†Ô∏è  IMPORTANT NOTES:
          - Do NOT separate PhotoBooth.exe from the DLL files
          - Templates folder can be customized for your business
          - Keep all files together in the same directory
          - Run as Administrator for hardware access
          
          üíº COMMERCIAL LICENSING:
          This software requires a valid commercial license.
          Contact sales@yourcompany.com for licensing information.
          
          üîß TECHNICAL SUPPORT:
          Email: support@yourcompany.com
          Include your version number: ${{ github.ref_name }}
          
          üìú COPYRIGHT:
          ¬© 2025 [Your Company Name]. All rights reserved.
          This software is protected by copyright law and international treaties.
          "@ | Out-File "deployment/PhotoBoothX/README.txt"
          
          Write-Host "‚úÖ Professional deployment package created"

      - name: Create Professional Installer
        if: env.INNO_AVAILABLE == 'true'
        run: |
          Write-Host "Creating professional Windows installer..."
          
          # Create comprehensive installer script based on Inno Setup examples
          $issScript = @"
          ; PhotoBooth Professional Installer
          ; Generated from official Inno Setup patterns
          
          [Setup]
          AppName=PhotoBooth Professional
          AppVersion=${{ github.ref_name }}
          AppPublisher=Your Company Name
          AppPublisherURL=https://yourcompany.com
          AppSupportURL=https://yourcompany.com/support
          AppUpdatesURL=https://yourcompany.com/updates
          DefaultDirName={autopf}\PhotoBooth Professional
          DefaultGroupName=PhotoBooth Professional
          AllowNoIcons=yes
          LicenseFile=EULA.txt
          InfoBeforeFile=README.txt
          OutputDir=installer-output
          OutputBaseFilename=PhotoBooth-Professional-Setup-${{ github.ref_name }}
          Compression=lzma2
          SolidCompression=yes
          WizardStyle=modern
          PrivilegesRequired=admin
          ArchitecturesAllowed=x64
          ArchitecturesInstallIn64BitMode=x64
          MinVersion=10.0
          DisableProgramGroupPage=yes
          SetupLogging=yes
          
          [Languages]
          Name: "english"; MessagesFile: "compiler:Default.isl"
          
          [Tasks]
          Name: "desktopicon"; Description: "Create a desktop icon"; GroupDescription: "Additional icons:"; Flags: unchecked
          
          [Files]
          Source: "PhotoBoothX\PhotoBooth.exe"; DestDir: "{app}"; Flags: ignoreversion
          Source: "PhotoBoothX\*.dll"; DestDir: "{app}"; Flags: ignoreversion
          Source: "PhotoBoothX\*.json"; DestDir: "{app}"; Flags: ignoreversion
          Source: "PhotoBoothX\Templates\*"; DestDir: "{app}\Templates"; Flags: ignoreversion recursesubdirs createallsubdirs
          Source: "PhotoBoothX\data\*"; DestDir: "{app}\data"; Flags: ignoreversion recursesubdirs createallsubdirs
          Source: "PhotoBoothX\README.txt"; DestDir: "{app}"; Flags: ignoreversion
          Source: "PhotoBoothX\VERSION.txt"; DestDir: "{app}"; Flags: ignoreversion
          Source: "PhotoBoothX\LICENSE.txt"; DestDir: "{app}"; Flags: ignoreversion
          Source: "PhotoBoothX\EULA.txt"; DestDir: "{app}"; Flags: ignoreversion
          
          [Dirs]
          Name: "{app}\logs"; Permissions: everyone-full
          Name: "{app}\config"; Permissions: everyone-full
          Name: "{localappdata}\PhotoBooth"; Permissions: everyone-full
          
          [Icons]
          Name: "{group}\PhotoBooth Professional"; Filename: "{app}\PhotoBooth.exe"
          Name: "{group}\Uninstall PhotoBooth Professional"; Filename: "{uninstallexe}"
          Name: "{autodesktop}\PhotoBooth Professional"; Filename: "{app}\PhotoBooth.exe"; Tasks: desktopicon
          
          [Registry]
          Root: HKLM; Subkey: "SOFTWARE\PhotoBooth"; ValueType: string; ValueName: "InstallPath"; ValueData: "{app}"
          Root: HKLM; Subkey: "SOFTWARE\PhotoBooth"; ValueType: string; ValueName: "Version"; ValueData: "${{ github.ref_name }}"
          
          [Run]
          Filename: "{app}\PhotoBooth.exe"; Description: "Launch PhotoBooth Professional"; Flags: nowait postinstall skipifsilent
          
          [UninstallDelete]
          Type: filesandordirs; Name: "{app}\logs"
          Type: filesandordirs; Name: "{app}\config"
          Type: filesandordirs; Name: "{localappdata}\PhotoBooth"
          
          [Messages]
          WelcomeLabel2=This will install PhotoBooth Professional on your computer.%n%nIt is recommended that you close all other applications before continuing.%n%nThis software requires .NET 8.0 Desktop Runtime to be installed.
          "@
          
          # Save installer script
          New-Item -ItemType Directory -Path "deployment/installer-output" -Force
          $issScript | Out-File "deployment/photobooth-setup.iss" -Encoding UTF8
          
          # Build installer
          try {
            Push-Location "deployment"
            $result = & $env:ISCC_PATH "photobooth-setup.iss"
            Write-Host "ISCC Result: $result"
            Pop-Location
            
            # Verify installer was created
            $installerPath = "deployment/installer-output/PhotoBooth-Professional-Setup-${{ github.ref_name }}.exe"
            if (Test-Path $installerPath) {
              $fileSize = (Get-Item $installerPath).Length / 1MB
              Write-Host "‚úÖ Professional installer created: $([math]::Round($fileSize, 2)) MB"
              echo "INSTALLER_CREATED=true" >> $env:GITHUB_ENV
              echo "INSTALLER_PATH=$installerPath" >> $env:GITHUB_ENV
            } else {
              Write-Host "‚ùå Installer not found at expected location"
              echo "INSTALLER_CREATED=false" >> $env:GITHUB_ENV
            }
          } catch {
            Write-Host "‚ùå Failed to build installer: $_"
            echo "INSTALLER_CREATED=false" >> $env:GITHUB_ENV
          }

      - name: Create Production ZIP
        run: |
          $tagName = "${{ github.ref_name }}" -replace "/", "-"
          $zipName = "PhotoBoothX-Professional-$tagName-win-x64.zip"
          
          Compress-Archive -Path "deployment\PhotoBoothX\*" -DestinationPath $zipName
          
          $zipSize = (Get-Item $zipName).Length / 1MB
          Write-Host "‚úÖ Production package created: $zipName ($([math]::Round($zipSize, 2)) MB)"

      - name: Prepare Release Assets
        run: |
          $tagName = "${{ github.ref_name }}" -replace "/", "-"
          
          if ($env:INSTALLER_CREATED -eq "true" -and $env:INSTALLER_PATH) {
            if (Test-Path $env:INSTALLER_PATH) {
              Copy-Item $env:INSTALLER_PATH "PhotoBooth-Professional-Setup-$tagName.exe"
              Write-Host "‚úÖ Professional installer ready for release"
            }
          }

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: PhotoBooth Professional ${{ github.ref_name }}
          files: |
            ${{ env.INSTALLER_CREATED == 'true' && 'PhotoBooth-Professional-Setup-*.exe' || '' }}
            PhotoBoothX-Professional-*-win-x64.zip
          body: |
            ## PhotoBooth Professional ${{ github.ref_name }}
            
            **üè™ Commercial Grade Photobooth Software - Professional Release**
            
            ### üì¶ Installation Options:
            
            ${{ env.INSTALLER_CREATED == 'true' && '**ü•á PROFESSIONAL WINDOWS INSTALLER** ‚≠ê' || '**üìÅ MANUAL INSTALLATION**' }}
            ${{ env.INSTALLER_CREATED == 'true' && '- `PhotoBooth-Professional-Setup-[version].exe` - **Complete Windows installer**' || '- Professional installer not available this release' }}
            ${{ env.INSTALLER_CREATED == 'true' && '  - ‚úÖ Automatic .NET runtime detection' || '' }}
            ${{ env.INSTALLER_CREATED == 'true' && '  - ‚úÖ Start Menu & Desktop shortcuts' || '' }}
            ${{ env.INSTALLER_CREATED == 'true' && '  - ‚úÖ Professional uninstaller included' || '' }}
            ${{ env.INSTALLER_CREATED == 'true' && '  - ‚úÖ Registry integration for licensing' || '' }}
            ${{ env.INSTALLER_CREATED == 'true' && '  - ‚úÖ EULA acceptance during install' || '' }}
            
            **üìÅ Manual Installation Package**
            - `PhotoBoothX-Professional-[version]-win-x64.zip` - Complete application package
            
            ### üéØ Professional Features:
            - ‚úÖ **Commercial licensing system** with activation
            - ‚úÖ **Professional Windows installer** (when available)
            - ‚úÖ **Enterprise-grade file structure** 
            - ‚úÖ **Version tracking & support**
            - ‚úÖ **Production-optimized build**
            - ‚úÖ **Legal documentation** included
            - ‚úÖ **Hardware integration ready**
            
            ### üìã System Requirements:
            - **Windows 10/11** (64-bit)
            - **[.NET 8.0 Desktop Runtime](https://dotnet.microsoft.com/download/dotnet/8.0)** (required)
            - **500MB** free disk space
            - **Administrator privileges** for installation
            
            ### üöÄ Quick Start:
            ${{ env.INSTALLER_CREATED == 'true' && '1. **Download installer** above' || '1. **Download ZIP** above' }}
            ${{ env.INSTALLER_CREATED == 'true' && '2. **Run as Administrator**' || '2. **Install .NET 8.0 Desktop Runtime**' }}
            ${{ env.INSTALLER_CREATED == 'true' && '3. **Follow setup wizard**' || '3. **Extract to desired location**' }}
            ${{ env.INSTALLER_CREATED == 'true' && '4. **Launch from Start Menu**' || '4. **Run PhotoBooth.exe as Administrator**' }}
            
            ### üìû Professional Support:
            - üìß **Technical Support**: support@yourcompany.com
            - üí∞ **Sales & Licensing**: sales@yourcompany.com
            - üìñ **Documentation**: Complete guides included
            
            ### üîí Commercial Licensing:
            **Professional License Required** - Annual subscription model  
            Contact sales team for enterprise pricing and volume discounts.
            
            ---
            **Built with official [Inno Setup](https://github.com/jrsoftware/issrc) - Industry standard Windows installer**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 